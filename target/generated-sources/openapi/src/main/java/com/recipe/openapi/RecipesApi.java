/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.recipe.openapi;

import com.recipe.openapi.Recipe;
import com.recipe.openapi.RecipeResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-05-31T17:27:29.458741200-03:00[America/Sao_Paulo]")
@Validated
@Api(value = "recipes", description = "the recipes API")
public interface RecipesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /recipes/{dishId} : Remove the recipe from database
     *
     * @param dishId  (required)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Remove the recipe from database", nickname = "recipesDishIdDelete", notes = "", tags={ "Recipe", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @DeleteMapping(
        value = "/recipes/{dishId}"
    )
    default ResponseEntity<Void> recipesDishIdDelete(@ApiParam(value = "",required=true) @PathVariable("dishId") String dishId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /recipes : Retrieve recipes from database
     *
     * @param dish  (optional)
     * @param isVegetarian  (optional)
     * @return Successfully retrieved recipes (status code 200)
     */
    @ApiOperation(value = "Retrieve recipes from database", nickname = "recipesGet", notes = "", response = RecipeResponse.class, responseContainer = "List", tags={ "Recipe", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved recipes", response = RecipeResponse.class, responseContainer = "List") })
    @GetMapping(
        value = "/recipes",
        produces = { "application/json" }
    )
    default ResponseEntity<List<RecipeResponse>> recipesGet(@ApiParam(value = "") @Valid @RequestParam(value = "dish", required = false) String dish,@ApiParam(value = "") @Valid @RequestParam(value = "isVegetarian", required = false) Boolean isVegetarian) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalPersonSuitable\" : 12, \"dish\" : \"Traditional Coffee\", \"dateAndTimeOfCreation\" : \"29-05-2021 10:00\", \"isVegetarian\" : false, \"ingredients\" : [ \"ingredients\", \"ingredients\" ], \"cookingInstructions\" : \"cookingInstructions\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /recipes : Creates a recipe in database
     *
     * @param recipe  (required)
     * @return OK (status code 200)
     *         or Authentication information is missing or invalid (status code 401)
     */
    @ApiOperation(value = "Creates a recipe in database", nickname = "recipesPost", notes = "", tags={ "Recipe", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Authentication information is missing or invalid") })
    @PostMapping(
        value = "/recipes",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> recipesPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Recipe recipe) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /recipes : Updates a recipe in database
     *
     * @param recipe  (required)
     * @return OK (status code 200)
     *         or Authentication information is missing or invalid (status code 401)
     */
    @ApiOperation(value = "Updates a recipe in database", nickname = "recipesPut", notes = "", tags={ "Recipe", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Authentication information is missing or invalid") })
    @PutMapping(
        value = "/recipes",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> recipesPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Recipe recipe) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
