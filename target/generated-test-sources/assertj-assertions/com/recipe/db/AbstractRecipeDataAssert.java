package com.recipe.db;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link RecipeData} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractRecipeDataAssert<S extends AbstractRecipeDataAssert<S, A>, A extends RecipeData> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractRecipeDataAssert}</code> to make assertions on actual RecipeData.
   * @param actual the RecipeData we want to make assertions on.
   */
  protected AbstractRecipeDataAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual RecipeData's cookingInstructions is equal to the given one.
   * @param cookingInstructions the given cookingInstructions to compare the actual RecipeData's cookingInstructions to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RecipeData's cookingInstructions is not equal to the given one.
   */
  public S hasCookingInstructions(String cookingInstructions) {
    // check that actual RecipeData we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cookingInstructions of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCookingInstructions = actual.getCookingInstructions();
    if (!Objects.areEqual(actualCookingInstructions, cookingInstructions)) {
      failWithMessage(assertjErrorMessage, actual, cookingInstructions, actualCookingInstructions);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RecipeData's dateCreation is equal to the given one.
   * @param dateCreation the given dateCreation to compare the actual RecipeData's dateCreation to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RecipeData's dateCreation is not equal to the given one.
   */
  public S hasDateCreation(java.util.Date dateCreation) {
    // check that actual RecipeData we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting dateCreation of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Date actualDateCreation = actual.getDateCreation();
    if (!Objects.areEqual(actualDateCreation, dateCreation)) {
      failWithMessage(assertjErrorMessage, actual, dateCreation, actualDateCreation);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RecipeData's dish is equal to the given one.
   * @param dish the given dish to compare the actual RecipeData's dish to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RecipeData's dish is not equal to the given one.
   */
  public S hasDish(String dish) {
    // check that actual RecipeData we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting dish of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDish = actual.getDish();
    if (!Objects.areEqual(actualDish, dish)) {
      failWithMessage(assertjErrorMessage, actual, dish, actualDish);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RecipeData's id is equal to the given one.
   * @param id the given id to compare the actual RecipeData's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RecipeData's id is not equal to the given one.
   */
  public S hasId(String id) {
    // check that actual RecipeData we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RecipeData's ingredients contains the given String elements.
   * @param ingredients the given elements that should be contained in actual RecipeData's ingredients.
   * @return this assertion object.
   * @throws AssertionError if the actual RecipeData's ingredients does not contain all given String elements.
   */
  public S hasIngredients(String... ingredients) {
    // check that actual RecipeData we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (ingredients == null) failWithMessage("Expecting ingredients parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getIngredients(), ingredients);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RecipeData's ingredients contains the given String elements in Collection.
   * @param ingredients the given elements that should be contained in actual RecipeData's ingredients.
   * @return this assertion object.
   * @throws AssertionError if the actual RecipeData's ingredients does not contain all given String elements.
   */
  public S hasIngredients(java.util.Collection<? extends String> ingredients) {
    // check that actual RecipeData we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (ingredients == null) {
      failWithMessage("Expecting ingredients parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getIngredients(), ingredients.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RecipeData's ingredients contains <b>only</b> the given String elements and nothing else in whatever order.
   * @param ingredients the given elements that should be contained in actual RecipeData's ingredients.
   * @return this assertion object.
   * @throws AssertionError if the actual RecipeData's ingredients does not contain all given String elements.
   */
  public S hasOnlyIngredients(String... ingredients) {
    // check that actual RecipeData we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (ingredients == null) failWithMessage("Expecting ingredients parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getIngredients(), ingredients);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RecipeData's ingredients contains <b>only</b> the given String elements in Collection and nothing else in whatever order.
   * @param ingredients the given elements that should be contained in actual RecipeData's ingredients.
   * @return this assertion object.
   * @throws AssertionError if the actual RecipeData's ingredients does not contain all given String elements.
   */
  public S hasOnlyIngredients(java.util.Collection<? extends String> ingredients) {
    // check that actual RecipeData we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (ingredients == null) {
      failWithMessage("Expecting ingredients parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getIngredients(), ingredients.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RecipeData's ingredients does not contain the given String elements.
   *
   * @param ingredients the given elements that should not be in actual RecipeData's ingredients.
   * @return this assertion object.
   * @throws AssertionError if the actual RecipeData's ingredients contains any given String elements.
   */
  public S doesNotHaveIngredients(String... ingredients) {
    // check that actual RecipeData we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (ingredients == null) failWithMessage("Expecting ingredients parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getIngredients(), ingredients);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RecipeData's ingredients does not contain the given String elements in Collection.
   *
   * @param ingredients the given elements that should not be in actual RecipeData's ingredients.
   * @return this assertion object.
   * @throws AssertionError if the actual RecipeData's ingredients contains any given String elements.
   */
  public S doesNotHaveIngredients(java.util.Collection<? extends String> ingredients) {
    // check that actual RecipeData we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (ingredients == null) {
      failWithMessage("Expecting ingredients parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getIngredients(), ingredients.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RecipeData has no ingredients.
   * @return this assertion object.
   * @throws AssertionError if the actual RecipeData's ingredients is not empty.
   */
  public S hasNoIngredients() {
    // check that actual RecipeData we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have ingredients but had :\n  <%s>";

    // check
    if (actual.getIngredients().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getIngredients());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual RecipeData's quantityOfPersonsSuitable is equal to the given one.
   * @param quantityOfPersonsSuitable the given quantityOfPersonsSuitable to compare the actual RecipeData's quantityOfPersonsSuitable to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RecipeData's quantityOfPersonsSuitable is not equal to the given one.
   */
  public S hasQuantityOfPersonsSuitable(Integer quantityOfPersonsSuitable) {
    // check that actual RecipeData we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting quantityOfPersonsSuitable of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualQuantityOfPersonsSuitable = actual.getQuantityOfPersonsSuitable();
    if (!Objects.areEqual(actualQuantityOfPersonsSuitable, quantityOfPersonsSuitable)) {
      failWithMessage(assertjErrorMessage, actual, quantityOfPersonsSuitable, actualQuantityOfPersonsSuitable);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RecipeData is vegetarian.
   * @return this assertion object.
   * @throws AssertionError - if the actual RecipeData is not vegetarian.
   */
  public S isVegetarian() {
    // check that actual RecipeData we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isVegetarian()) {
      failWithMessage("\nExpecting that actual RecipeData is vegetarian but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RecipeData is not vegetarian.
   * @return this assertion object.
   * @throws AssertionError - if the actual RecipeData is vegetarian.
   */
  public S isNotVegetarian() {
    // check that actual RecipeData we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isVegetarian()) {
      failWithMessage("\nExpecting that actual RecipeData is not vegetarian but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

}
