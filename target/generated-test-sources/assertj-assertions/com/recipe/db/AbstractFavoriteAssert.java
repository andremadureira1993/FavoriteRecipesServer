package com.recipe.db;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Favorite} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractFavoriteAssert<S extends AbstractFavoriteAssert<S, A>, A extends Favorite> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractFavoriteAssert}</code> to make assertions on actual Favorite.
   * @param actual the Favorite we want to make assertions on.
   */
  protected AbstractFavoriteAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Favorite's dish is equal to the given one.
   * @param dish the given dish to compare the actual Favorite's dish to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Favorite's dish is not equal to the given one.
   */
  public S hasDish(String dish) {
    // check that actual Favorite we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting dish of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDish = actual.getDish();
    if (!Objects.areEqual(actualDish, dish)) {
      failWithMessage(assertjErrorMessage, actual, dish, actualDish);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Favorite's id is equal to the given one.
   * @param id the given id to compare the actual Favorite's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Favorite's id is not equal to the given one.
   */
  public S hasId(String id) {
    // check that actual Favorite we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Favorite's recipeId is equal to the given one.
   * @param recipeId the given recipeId to compare the actual Favorite's recipeId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Favorite's recipeId is not equal to the given one.
   */
  public S hasRecipeId(String recipeId) {
    // check that actual Favorite we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting recipeId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRecipeId = actual.getRecipeId();
    if (!Objects.areEqual(actualRecipeId, recipeId)) {
      failWithMessage(assertjErrorMessage, actual, recipeId, actualRecipeId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Favorite's username is equal to the given one.
   * @param username the given username to compare the actual Favorite's username to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Favorite's username is not equal to the given one.
   */
  public S hasUsername(String username) {
    // check that actual Favorite we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting username of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualUsername = actual.getUsername();
    if (!Objects.areEqual(actualUsername, username)) {
      failWithMessage(assertjErrorMessage, actual, username, actualUsername);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
